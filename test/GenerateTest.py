#! /usr/env/bin python
# Author: Lu Xu
# Generate the header files including all the declarations of test functions,
# a array of functions, a array of function names and the number of functions.

import os, re

testc = 'Test.c'
testh = 'Test.h'
testinfo = 'TestFunctions.c'

description = \
'''/**
 * This file is automatically generated by GenerateTest.py, collecting function
 * information from source file "Test.c".
 *
 * If you want to change the content of this file, go to GenerateTest.py and
 * modify the script. Or you can maintain this file by yourself after you delete
 * the related lines in the makefile.
 */
'''

def readfuncs(testfile):
    '''
    read a source/header file and find the function declarations or definitions
    in the file.
    return a list of sorted function names or None if the file does not exist.
    '''
    if not os.path.exists(testfile):
        return None
    funcs = []
    source = open(testfile, 'r')
    # this is the pattern "int test...()" of test functions
    p = re.compile('int +test[1-9|a-z|A-Z|_]* *\( *\) *\{?')
    for line in source.readlines():
        if p.match(line) != None:
            funcs.append(''.join(line.split())[3:].split('(')[0])
    funcs = list(set(funcs))
    funcs.sort()
    source.close()
    return funcs

def gentest(funcs):
    '''
    generate test header file and testfunctions source file
    '''
    header = open(testh, 'w')
    header.write(description)
    header.write(
'''
#ifndef _TESTDECLARATION_H_
#define _TESTDECLARATION_H_

#define PASSED 0
#define FAILED 1

extern int (*tests[])();    //the list of test functions which are listed below
extern char *names[];       //the list of test functions' names
extern int num;	            //the number of test functions

//declarations of testfunctions
%s

void testall();
#endif
''' % ''.join(['int %s();\n' % func for func in funcs])
    )
    header.close()

    cfile = open(testinfo, 'w')
    cfile.write(description)
    cfile.write(
'''
#include "Test.h"

int (*tests[])() = {
%s
};

char *names[] = {
%s
};

int num = %d;
''' % \
    (''.join(['\t%s,\n' % i for i in funcs])[:-2], \
    ''.join(['\t\"%s\",\n' % i for i in funcs])[:-2], \
    len(funcs))
    )
    cfile.close()

def main():
    funclist = readfuncs(testc)
    if funclist != readfuncs(testh):
            gentest(funclist)
            print 'File ' + testh + ' and ' + testinfo + ' (re)generated.'

if __name__ == '__main__':
    main()
