#! /usr/bin/env python2
'''
Author: Lu Xu(oliver_lew@outlook.com)

What does this script do:
  Generate the header files including all the declarations of test functions,
an array of test functions, an array of test function names and the number of 
test functions.

Where to look for test functions:
  The source files in the current folder of which the names start with "test"
will be scanned.

And the test functions must match the following description:
  1. return int, 
  2. take no arguments and 
  3. the name also start with "test".
'''

import os, sys, re

def readfuncs(filenames):
    '''
    Read files and find test function declarations or definitions.
    
    Input:
    filenames: must be a list of filenames
    
    Return:
    a list of sorted(case insensitive) function names
    '''
    pattern = re.compile(r'int\s+(test\w+)\s*\(\s*\)')
    raw_list = sum([pattern.findall(open(f).read()) for f in filenames], [])
    return sorted(raw_list, key=str.lower)

def gentest(funcs, testh):
    '''
    generate test header file
    
    Input:
    funcs: list of functions name.
    testh: name of header file to be created.
    '''
    with open(testh, 'w') as header:
        header.write(
'''/**
 * This file is automatically generated by GenerateTest.py, collecting function
 * information from source files.
 *
 * If you want to change the content of this file, go to GenerateTest.py and
 * modify the script. Or you can maintain this file by yourself after you delete
 * the related lines in the makefile.
 */

#ifndef _TESTDECLARATION_H_
#define _TESTDECLARATION_H_

#define PASSED 0
#define FAILED 1

/* declarations of testfunctions */
%s\nvoid testall();

/* define the array of all test functions */
#define FUNC_ARRAY { %s \\\n}

/* define the array of function names */
#define NAME_ARRAY { %s \\\n}

/* define the number of functions */
#define FUNC_COUNT %d

#endif
''' %  (''.join(['int %s();\n' % func for func in funcs]),
        ''.join(['\\\n\t%s,' % func for func in funcs])[:-1],
        ''.join(['\\\n\t\"%s\",' % func for func in funcs])[:-1],
        len(funcs)))

def main():
    '''
    Update the header file
    '''
    testdir = sys.path[0]

    testc = [os.path.join(testdir, f) for f in os.listdir(testdir) 
                if f.startswith('test') and f.endswith('.c')]
    funclist = readfuncs(testc)

    testh = os.path.join(testdir, 'Test.h')
    gentest(funclist, testh)
    print 'Test header file is (re)generated.'

if __name__ == '__main__':
    main()
